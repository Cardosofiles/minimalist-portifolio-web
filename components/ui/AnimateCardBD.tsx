"use client";

import { animate, motion } from "framer-motion";
import type React from "react";
import { useEffect } from "react";
import { FaGithub } from "react-icons/fa";

import { cn } from "@/utils/cn";
export function CardDemoDB() {
  return (
    <Card className="flex flex-col items-center justify-center">
      <CardSkeletonContainer>
        <Skeleton />
      </CardSkeletonContainer>
      <CardTitle>Ferramentas Essenciais</CardTitle>
      <CardDescription>
        Ferramentas Essenciais para Desenvolvimento e Acessibilidade.
      </CardDescription>
    </Card>
  );
}

const Skeleton = () => {
  const scale = [1, 1.1, 1];
  const transform = ["translateY(0px)", "translateY(-4px)", "translateY(0px)"];
  const sequence = [
    [
      ".circle-1",
      {
        scale,
        transform,
      },
      { duration: 0.8 },
    ],
    [
      ".circle-2",
      {
        scale,
        transform,
      },
      { duration: 0.8 },
    ],
    [
      ".circle-3",
      {
        scale,
        transform,
      },
      { duration: 0.8 },
    ],
    [
      ".circle-4",
      {
        scale,
        transform,
      },
      { duration: 0.8 },
    ],
    [
      ".circle-5",
      {
        scale,
        transform,
      },
      { duration: 0.8 },
    ],
  ];

  // biome-ignore lint/correctness/useExhaustiveDependencies: <explanation>
  useEffect(() => {
    // @ts-ignore
    animate(sequence, {
      // biome-ignore lint/style/useNumberNamespace: <explanation>
      repeat: Infinity,
      repeatDelay: 1,
    });
  }, []);
  return (
    <div className="p-8 overflow-hidden h-full relative flex items-center justify-center">
      <div className="flex flex-row flex-shrink-0 justify-center items-center gap-2">
        <Container className="h-8 w-8 circle-1">
          <FigmaLogo className="lg:h-4 lg:w-4 md:h-4 md:w-4 sm:h-4 max-sm:w-4" />
        </Container>
        <Container className="h-12 w-12 circle-2">
          <FaGithub className="lg:h-5 lg:w-5 md:h-8 md:w-8 text-white" />
        </Container>
        <Container className="circle-3">
          <GitLogo className="lg:h-8 lg:w-8 md:h-10 md:w-10" />
        </Container>
        <Container className="h-12 w-12 circle-4">
          <DockerLogo className="h-6 w-6 md:h-8 md:w-8" />
        </Container>
        <Container className="h-8 w-8 circle-5">
          <ChatGPT className="lg:h-4 lg:w-4 md:h-4 md:w-4 sm:h-4 max-sm:w-4" />
        </Container>
      </div>

      <div className="h-40 w-px absolute top-20 m-auto z-40 bg-gradient-to-b from-transparent via-cyan-500 to-transparent animate-move">
        <div className="w-10 h-32 top-1/2 -translate-y-1/2 absolute -left-10">
          <Sparkles />
        </div>
      </div>
    </div>
  );
};
const Sparkles = () => {
  const randomMove = () => Math.random() * 2 - 1;
  const randomOpacity = () => Math.random();
  const random = () => Math.random();
  return (
    <div className="absolute inset-0">
      {[...Array(12)].map((_, i) => (
        <motion.span
          key={`star-${i}`}
          animate={{
            top: `calc(${random() * 100}% + ${randomMove()}px)`,
            left: `calc(${random() * 100}% + ${randomMove()}px)`,
            opacity: randomOpacity(),
            scale: [1, 1.2, 0],
          }}
          transition={{
            duration: random() * 2 + 4,
            // biome-ignore lint/style/useNumberNamespace: <explanation>
            repeat: Infinity,
            ease: "linear",
          }}
          style={{
            position: "absolute",
            top: `${random() * 100}%`,
            left: `${random() * 100}%`,
            // biome-ignore lint/style/noUnusedTemplateLiteral: <explanation>
            width: `2px`,
            // biome-ignore lint/style/noUnusedTemplateLiteral: <explanation>
            height: `2px`,
            borderRadius: "50%",
            zIndex: 1,
          }}
          className="inline-block bg-black dark:bg-white"
        />
      ))}
    </div>
  );
};

export const Card = ({
  className,
  children,
}: {
  className?: string;
  children: React.ReactNode;
}) => {
  return (
    <div
      className={cn(
        "max-w-sm md:max-w-full w-full mx-auto p-8 rounded-xl border border-[rgba(255,255,255,0.10)] group",
        className
      )}
      style={{
        background: "rgb(2,0,36)",
        backgroundColor:
          "linear-gradient(90deg, rgba(2,0,36,1) 0%, rgba(59,59,68,1) 50%, rgba(93,108,111,1) 100%)",
      }}
    >
      {children}
    </div>
  );
};

export const CardTitle = ({
  children,
  className,
}: {
  children: React.ReactNode;
  className?: string;
}) => {
  return (
    <h3
      className={cn(
        "lg:text-lg md:text-3xl font-semibold text-white py-2",
        className
      )}
    >
      {children}
    </h3>
  );
};

export const CardDescription = ({
  children,
  className,
}: {
  children: React.ReactNode;
  className?: string;
}) => {
  return (
    <p
      className={cn(
        "lg:text-sm md:text-xl font-normal text-neutral-400 max-w-sm",
        className
      )}
    >
      {children}
    </p>
  );
};

export const CardSkeletonContainer = ({
  className,
  children,
  showGradient = true,
}: {
  className?: string;
  children: React.ReactNode;
  showGradient?: boolean;
}) => {
  return (
    <div
      className={cn(
        "h-[15rem] md:h-[20rem] rounded-xl z-40",
        className,
        showGradient &&
          "bg-[rgba(40,40,40,0.70)] [mask-image:radial-gradient(50%_50%_at_50%_50%,white_0%,transparent_100%)]"
      )}
    >
      {children}
    </div>
  );
};

const Container = ({
  className,
  children,
}: {
  className?: string;
  children: React.ReactNode;
}) => {
  return (
    <div
      className={cn(
        `h-16 w-16 md:h-24 md:w-24 lg:h-10 lg:w-10  rounded-full flex items-center justify-center bg-[rgba(248,248,248,0.01)]
    shadow-[0px_0px_8px_0px_rgba(248,248,248,0.25)_inset,0px_32px_24px_-16px_rgba(0,0,0,0.40)]
    `,
        className
      )}
      style={{
        background: "rgb(2,0,36)",
        backgroundColor:
          "linear-gradient(90deg, rgba(2,0,36,1) 0%, rgba(59,59,68,1) 50%, rgba(93,108,111,1) 100%)",
      }}
    >
      {children}
    </div>
  );
};

export const FigmaLogo = ({ className }: { className?: string }) => {
  return (
    // biome-ignore lint/a11y/noSvgWithoutTitle: <explanation>
    <svg
      width="600px"
      height="600px"
      viewBox="0 0 32 32"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      className={className}
    >
      <path
        fill-rule="evenodd"
        clip-rule="evenodd"
        d="M16 16C16 13.7909 17.7909 12 20 12C22.2091 12 24 13.7909 24 16C24 18.2091 22.2091 20 20 20C17.7909 20 16 18.2091 16 16Z"
        fill="#1ABCFE"
      />
      <path
        fill-rule="evenodd"
        clip-rule="evenodd"
        d="M8 24C8 21.7909 9.79086 20 12 20H16V24C16 26.2091 14.2091 28 12 28C9.79086 28 8 26.2091 8 24Z"
        fill="#0ACF83"
      />
      <path
        fill-rule="evenodd"
        clip-rule="evenodd"
        d="M16 4V12H20C22.2091 12 24 10.2091 24 8C24 5.79086 22.2091 4 20 4H16Z"
        fill="#FF7262"
      />
      <path
        fill-rule="evenodd"
        clip-rule="evenodd"
        d="M8 8C8 10.2091 9.79086 12 12 12H16V4H12C9.79086 4 8 5.79086 8 8Z"
        fill="#F24E1E"
      />
      <path
        fill-rule="evenodd"
        clip-rule="evenodd"
        d="M8 16C8 18.2091 9.79086 20 12 20H16V12H12C9.79086 12 8 13.7909 8 16Z"
        fill="#A259FF"
      />
    </svg>
  );
};

export const GitLogo = ({ className }: { className?: string }) => {
  return (
    // biome-ignore lint/a11y/noSvgWithoutTitle: <explanation>
    <svg
      viewBox="0 0 32 32"
      width="38"
      height="38"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      className={className}
    >
      <path
        d="M2.58536 17.4132C1.80488 16.6327 1.80488 15.3673 2.58536 14.5868L14.5868 2.58536C15.3673 1.80488 16.6327 1.80488 17.4132 2.58536L29.4146 14.5868C30.1951 15.3673 30.1951 16.6327 29.4146 17.4132L17.4132 29.4146C16.6327 30.1951 15.3673 30.1951 14.5868 29.4146L2.58536 17.4132Z"
        fill="#EE513B"
      />
      <path
        d="M12.1489 5.06152L10.9336 6.27686L14.0725 9.41577C13.9455 9.68819 13.8746 9.99201 13.8746 10.3124C13.8746 11.222 14.4461 11.9981 15.2496 12.3012V19.9798C14.4461 20.2829 13.8746 21.059 13.8746 21.9686C13.8746 23.1422 14.826 24.0936 15.9996 24.0936C17.1732 24.0936 18.1246 23.1422 18.1246 21.9686C18.1246 21.144 17.6549 20.429 16.9684 20.0768V12.3117L19.9689 15.3122C19.8481 15.5791 19.7809 15.8754 19.7809 16.1874C19.7809 17.361 20.7323 18.3124 21.9059 18.3124C23.0795 18.3124 24.0309 17.361 24.0309 16.1874C24.0309 15.0138 23.0795 14.0624 21.9059 14.0624C21.6778 14.0624 21.4582 14.0983 21.2522 14.1648L18.0297 10.9423C18.0914 10.7433 18.1246 10.5317 18.1246 10.3124C18.1246 9.13878 17.1732 8.18738 15.9996 8.18738C15.7803 8.18738 15.5688 8.22061 15.3697 8.2823L12.1489 5.06152Z"
        fill="white"
      />
    </svg>
  );
};
export const ChatGPT = ({ className }: { className?: string }) => {
  return (
    // biome-ignore lint/a11y/noSvgWithoutTitle: <explanation>
    <svg
      clip-rule="evenodd"
      fill-rule="evenodd"
      image-rendering="optimizeQuality"
      shape-rendering="geometricPrecision"
      text-rendering="geometricPrecision"
      viewBox="9534.07 4435.93 21571.86 21590"
      xmlns="http://www.w3.org/2000/svg"
      className={className}
    >
      <g fill-rule="nonzero">
        <path
          d="m14767.48 4435.93h453.39l-5.18 18.14h-453.39zm453.39 0h10212.07l-5.18 18.14h-10212.07z"
          fill="#040609"
          fill-opacity=".078"
        />
        <path
          d="m25432.94 4435.93h431.8l-5.18 18.14h-431.8z"
          fill="#040609"
          fill-opacity=".078"
        />
        <path
          d="m14762.3 4454.07h11097.26c2854.2 9.5 5109.92 2159 5228.23 5012.33v971.55l8.64 14772.74 9.5 815.24h-16607.89c-2747.98-164.95-4716.98-2180.59-4963.97-4900.93v-11766.55c189.99-2799.79 2412.89-4906.98 5228.23-4904.38zm7660.13 3957.87c-495.13-553.85-1117.78-931.82-1867.96-1133.9-2141.73-576.89-4230.78 559.61-4995.07 2628.8-8.55 24.02-29.69 43.07-56.05 49.83-1579.61 395.78-2737.69 1524.51-3095.22 3099.72-283.26 1244.73 3.16 2427.57 859.28 3548.53 49.18 62.05 66.16 147.47 43.37 226.28-384.49 1276.38-95.19 2601.14 720.91 3649.55 964.93 1238.98 2314.74 1745.34 4049.42 1519.08 27.7-3.71 54.81 5.71 72.66 25.15 2044.89 2165.8 5849.91 1544.01 6849.96-1380.14 28.19-78.55 90.62-136.76 168.36-158.76 3000.19-876.7 4123.73-4164.42 2143.5-6648.14-39.07-49.88-51.37-114.02-34.08-173.46 437.38-1575.33 9.04-3123.76-1183.6-4208.44-935.56-850.36-2114.66-1181.41-3537.3-993.14-52.81 6.29-104.35-13.03-138.72-51.58z"
          fill="#74aa9c"
        />
        <path
          d="m22422.43 8411.94c33.83 37.93 85.37 57.25 137.35 51.06 1423.19-188.33 2602.57 142.68 3538.13 993.04 1192.64 1084.68 1620.98 2633.11 1183.14 4210.05-16.83 57.83-4.53 121.97 33.5 170.53 1981.27 2485.04 857.73 5772.76-2145.01 6650.18-75.19 21.28-137.62 79.49-164.94 155.54-1000.92 2926.65-4805.94 3548.44-6850.94 1382.53-17.74-19.33-44.85-28.75-72.39-25.07-1734.79 226.28-3084.65-280.07-4049.58-1519.05-816.1-1048.41-1105.4-2373.17-721.97-3646.11 23.85-82.25 6.87-167.67-44.48-232.55-854.67-1119.07-1140.37-2300.97-857.11-3545.7 357.53-1575.21 1515.61-2703.94 3094.28-3099.47 27.3-7.01 48.44-26.06 57.32-51.03 763.96-2068.24 2853.01-3204.74 4994.74-2627.85 750.18 202.08 1372.83 580.05 1867.96 1133.9zm-4274.82 2353.31c1065.68-630.43 2126.19-1245.88 3181.5-1846.37 3.02-1.72 6.08-3.92 8.86-6.43 20.9-18.82 22.85-50.76 4.34-71.31a49.43 49.43 0 0 0 -8.66-7.61c-1767.14-1239.41-4161.04-593.44-4783.7 1509.42-85.21 287.29-132.42 728.88-141.63 1324.77-15.54 1033.73 24.18 2068.32-5.18 3097.73-.62 34.13 17.09 66.04 46.2 82.67l1292.38 744.66c1.61.95 3.67 1.84 5.82 2.46 13.75 3.94 28.1-4.01 32.05-17.77.63-2.21.97-4.5 1-6.79 51.81-2284.75 60.44-3635.82 25.9-4053.23-30.23-362.71 10.36-555.29 341.12-752.2zm8208.52 2171.96c317.8-2684.07-2386.13-4327.5-4694.53-2987.19-956.29 555.58-1925.25 1120.09-2906.88 1693.52-26.17 15.06-41.73 42.64-41.44 72.53l-.01 1488.85c0 39.73 17.27 49.52 51.82 29.37 1201.55-700.09 2397.35-1390.11 3587.39-2070.05 272.9-156.31 468.94-208.99 737.51-50.95a187656.883 187656.883 0 0 0 3222.1 1845.51c1.68.89 3.34 1.6 5.06 2.15 15.87 5.16 32.81-3.16 37.82-18.58.56-1.71.95-3.48 1.18-5.27zm-7015.02 4630.62c-1184.29-693.76-2366.84-1378.02-3547.67-2052.78-363.58-207.26-478.44-365.3-448.21-780.69 27.64-383.44 20.73-1571.18-20.73-3563.21.01-1.51-.18-3.34-.56-5.12-3.27-15.39-19.17-25.06-35.5-21.59-1.74.37-3.45.89-5.1 1.54-2137.7 930.22-2635.13 3691.15-782.71 5187.77 100.18 81.18 592.72 378.54 1477.62 892.1 644.82 374.8 1303.17 753.06 1975.05 1134.77 31.44 17.33 67.87 17.15 97.06.15l1291.61-747.17c2.34-1.36 4.18-2.8 5.8-4.47 9.94-10.3 9.37-26.97-1.26-37.24a27.844 27.844 0 0 0 -5.71-4.24zm6826.76-3379.27c-188.84-156.6-466.06-339.97-831.65-550.11-877.42-503.77-1771.25-1019.62-2681.48-1547.57-33.83-19.14-75.87-18.96-110.2.67l-1261.2 722.16c-50.09 28.79-50.09 57.58 0 86.36 1248.77 721.4 2485.73 1443.08 3710.89 2165.05 171.57 101.33 258.51 221.37 260.81 360.12 21.88 1295.4 21.88 2587.92 0 3877.56-.06 1.64.08 3.6.42 5.52 2.74 15.5 17.52 25.85 33.02 23.12 2.06-.37 4.08-.96 6.01-1.76 2075.51-849.89 2699.03-3630.68 873.38-5141.12zm-4319.73 99.32-1520.8-871.37c-22.58-13.32-51.61-13.09-75.77.74l-1482.17 855.95c-34.66 20.26-56.06 57.76-56.12 98.45l-.01 1722.88c-.12 26.93 13.92 52.02 36.79 65.43l1516.83 879.35c24.11 13.49 53 13.28 76.46-.28l1501.33-864.19c22.73-13.13 37.01-37.41 37.14-63.52l5.18-1755.22c.15-27.9-14.53-53.98-38.5-68.02zm2310.99 1329.94-1305.76-757.37c-25.91-14.4-38.58-6.91-38 22.45 8.64 1447.39 2.3 2873.77-19 4279.14-3.45 231.44-74.27 399.84-266.85 511.25-1096.77 631-2184.05 1254.81-3261.82 1871.42-3.02 1.73-5.8 3.75-8.34 6.03-19.84 17.87-21.45 48.46-3.58 68.3a49.25 49.25 0 0 0 7.68 6.89c1765.99 1293.63 4234.15 555.25 4811.9-1595.97 81.18-301.11 121.77-755.08 121.77-1361.9v-2982.88c.04-27.87-14.43-53.53-38-67.37zm-6403.59 3823.16c-67.36-12.09-130.98-35.12-190.86-69.09l-3270.45-1882.65c-2-1.15-3.88-2-5.84-2.63-15.42-5.01-31.98 3.43-36.99 18.85-.6 1.82-1.01 3.72-1.24 5.62-297.05 2467.06 2190.11 4351.43 4463.11 3117.35 412.8-223.96 1463.51-830.21 3152.14-1818.74 22.5-13.44 36.28-38.07 36.26-64.79l-13.81-1496.6c-.05-2.52-.38-4.74-1-6.88-3.81-13.29-17.31-21.08-30.14-17.4a23.22 23.22 0 0 0 -6.25 2.84c-1242.84 722.45-2485.18 1436.3-3727.04 2141.58-122.63 69.66-245.26 93.84-367.89 72.54z"
          fill="#fff"
        />
        <path
          d="m18147.61 10765.25c-330.76 196.91-371.35 389.49-341.12 752.2 34.54 417.41 25.91 1768.36-25.91 4052.87-.02 2.65-.36 4.94-.99 7.15-3.95 13.76-18.3 21.71-32.05 17.77a25.87 25.87 0 0 1 -6.13-2.66l-1291.64-744.22c-29.54-16.87-47.25-48.78-46.62-83.39 29.35-1028.93-10.37-2063.52 5.17-3097.25 9.21-595.89 56.42-1037.48 141.63-1324.77 622.66-2102.86 3016.56-2748.83 4783.48-1509.57 3.39 2.34 6.31 4.9 8.88 7.76 18.51 20.55 16.56 52.49-4.34 71.31a51.578 51.578 0 0 1 -9.08 6.55c-1055.17 600.41-2115.6 1215.83-3181.28 1846.25z"
          fill="#74aa9c"
        />
        <path
          d="m21661.6 9950.02c2308.4-1340.31 5012.33 303.12 4694.53 2987.19-.21 1.68-.6 3.45-1.16 5.16-5.01 15.42-21.95 23.74-37.82 18.58-1.72-.55-3.38-1.26-4.97-2.11a187637.762 187637.762 0 0 1 -3222.19-1845.55c-268.57-158.04-464.61-105.36-737.51 50.95-1190.04 679.94-2385.84 1369.96-3587.39 2070.05-34.55 20.15-51.82 10.36-51.82-29.37v-1489.71c-.28-29.03 15.28-56.61 40.7-71.26 982.13-573.71 1951.34-1138.35 2907.63-1693.93z"
          fill="#74aa9c"
        />
        <path
          d="m31087.79 9466.4 18.14 5.18v971.55l-18.14-5.18zm0 971.55 18.14 5.18-9.5 14767.56z"
          fill="#040609"
          fill-opacity=".078"
        />
        <g fill="#74aa9c">
          <path d="m19341.11 17567.83c1.76.98 3.69 2.41 5.4 4.06 10.63 10.27 11.2 26.94 1.26 37.24a25.477 25.477 0 0 1 -5.47 4.28l-1293.14 748.07c-27.99 16.29-64.42 16.47-94.67-.23-672.67-382.13-1331.42-760.6-1976.24-1135.4-884.9-513.56-1377.44-810.92-1477.62-892.1-1852.42-1496.62-1354.99-4257.55 782.42-5187.65 1.94-.77 3.65-1.29 5.39-1.66 16.33-3.47 32.23 6.2 35.5 21.59.38 1.78.57 3.61.59 5.43 41.44 1991.83 48.34 3179.46 20.7 3562.9-30.23 415.39 84.63 573.43 448.21 780.69 1180.83 674.76 2363.38 1359.02 3547.67 2052.78zm6826.76-3379.27c1825.65 1510.44 1202.13 4291.23-873.1 5141.02-2.21.9-4.23 1.49-6.29 1.86-15.5 2.73-30.28-7.62-33.02-23.12-.34-1.92-.48-3.88-.42-5.83 21.88-1289.43 21.88-2581.85 0-3877.25-2.3-138.75-89.24-258.79-260.81-360.12-1225.16-721.97-2462.12-1443.65-3710.89-2165.05-50.09-28.78-50.09-57.57 0-86.36l1260.86-721.97c34.67-19.82 76.71-20 110.89-.66 910 527.81 1803.71 1043.6 2681.13 1547.37 365.59 210.14 642.8 393.52 831.65 550.11zm-4319.73 99.32c24.33 14.24 39.01 40.32 38.86 68.63l-5.18 1754.43c-.13 26.49-14.41 50.77-37.47 64.09l-1501.47 864.28c-23.13 13.31-52.03 13.47-75.64.19l-1516.84-879.34c-23.21-13.61-37.25-38.7-37.13-66.03v-1722.48c.07-40.69 21.47-78.19 56.15-98.44l1481.92-855.84c24.39-13.95 53.42-14.18 76.22-.71z" />
          <path d="m24159.13 15617.82c23.57 13.83 38.04 39.49 37.99 67.35.01 994.3.01 1988.6.01 2982.89 0 606.82-40.59 1060.79-121.77 1361.9-577.75 2151.22-3045.91 2889.6-4811.98 1595.93a50.075 50.075 0 0 1 -7.6-6.85c-17.87-19.84-16.26-50.43 3.58-68.3 2.54-2.28 5.32-4.3 8.28-6 1077.81-616.63 2165.11-1240.45 3261.88-1871.45 192.58-111.41 263.4-279.81 266.85-511.25 21.3-1405.37 27.64-2831.75 19-4279.14-.58-29.36 12.09-36.85 38-22.45z" />
          <path d="m17755.54 19440.98c122.63 21.3 245.26-2.88 367.89-72.54 1241.86-705.27 2484.29-1419.19 3727.3-2141.73 1.67-1.1 3.78-2.06 5.99-2.69 12.83-3.68 26.33 4.11 30.14 17.4.62 2.14.95 4.36 1 6.57l13.82 1496.93c.01 26.7-13.77 51.33-36.27 64.75-1688.63 988.55-2739.34 1594.8-3152.14 1818.76-2273 1234.08-4760.16-650.29-4463.08-3117.6.2-1.65.61-3.55 1.21-5.37 5.01-15.42 21.57-23.86 36.99-18.85 1.96.63 3.84 1.48 5.62 2.5l3270.67 1882.78c59.88 33.97 123.5 57 190.86 69.09z" />
        </g>
      </g>
    </svg>
  );
};

export const DockerLogo = ({ className }: { className?: string }) => {
  return (
    // biome-ignore lint/a11y/noSvgWithoutTitle: <explanation>
    <svg
      width="24"
      height="24"
      viewBox="0 0 45 36"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M44.268 14.7909C43.1645 14.0381 40.2658 13.7166 38.1586 14.2924C38.0455 12.1648 36.9622 10.3716 34.9822 8.80687L34.2495 8.30837L33.761 9.05646C32.8008 10.5337 32.3959 12.5026 32.5391 14.2924C32.6522 15.3952 33.0303 16.6344 33.761 17.5337C31.0182 19.1465 28.4894 18.7803 17.2919 18.7803H0.00382783C-0.0463583 21.3433 0.359814 26.2728 3.45262 30.2859C3.79455 30.7294 4.1686 31.1581 4.57545 31.5711C7.0901 34.1233 10.8895 35.9952 16.5706 36C25.2381 36.0081 32.6636 31.2591 37.181 19.778C38.6672 19.8024 42.5911 20.0479 44.5115 16.2871C44.5584 16.224 45 15.2901 45 15.2901L44.268 14.7916V14.7909ZM11.2863 12.4476H6.42497V17.375H11.2863V12.4476ZM17.5663 12.4476H12.7049V17.375H17.5663V12.4476ZM23.8469 12.4476H18.9855V17.375H23.8469V12.4476ZM30.1275 12.4476H25.2662V17.375H30.1275V12.4476ZM5.00571 12.4476H0.144349V17.375H5.00571V12.4476ZM11.2863 6.22415H6.42497V11.1515H11.2863V6.22415ZM17.5663 6.22415H12.7049V11.1515H17.5663V6.22415ZM23.8469 6.22415H18.9855V11.1515H23.8469V6.22415ZM23.8469 0H18.9855V4.92737H23.8469V0Z"
        fill="#1D63ED"
      />
    </svg>
  );
};
